module;
#include <cstdint>
export module tilemap;
import components;
import game;

export namespace components {
struct tilemap
  : public sf::Drawable
  , public sf::Transformable
{
  tilemap(sf::Texture *text,
    sf::Vector2i tileSize,
    const int *tiles,
    std::uint8_t width,
    std::uint8_t height);

  virtual void draw(sf::RenderTarget &target,
    sf::RenderStates states) const override;
  sf::Texture *tileset;
  sf::VertexArray vertices;
};

}// namespace components


module :private;

// grabbed from https://www.sfml-dev.org/tutorials/2.6/graphics-vertex-array.php
components::tilemap::tilemap(sf::Texture *text,
  sf::Vector2i tileSize,
  const int *tiles,
  std::uint8_t width,
  std::uint8_t height)
{
  tileset = text;
  // resize the vertex array to fit the level size
  vertices.setPrimitiveType(sf::Triangles);
  vertices.resize(width * height * 6);

  for (unsigned int i = 0; i < width; ++i)
    for (unsigned int j = 0; j < height; ++j)
    {
      // get the current tile number
      int tileNumber = tiles[i + j * width];

      // find its position in the tileset texture
      int tu = tileNumber % (tileset->getSize().x / tileSize.x);
      int tv = tileNumber / (tileset->getSize().x / tileSize.x);

      // get a pointer to the triangles' vertices of the current tile
      sf::Vertex *triangles = &vertices[(i + j * width) * 6];

      // define the 6 corners of the two triangles
      triangles[0].position = sf::Vector2f(i * tileSize.x, j * tileSize.y);
      triangles[1].position =
        sf::Vector2f((i + 1) * tileSize.x, j * tileSize.y);
      triangles[2].position =
        sf::Vector2f(i * tileSize.x, (j + 1) * tileSize.y);
      triangles[3].position =
        sf::Vector2f(i * tileSize.x, (j + 1) * tileSize.y);
      triangles[4].position =
        sf::Vector2f((i + 1) * tileSize.x, j * tileSize.y);
      triangles[5].position =
        sf::Vector2f((i + 1) * tileSize.x, (j + 1) * tileSize.y);

      // define the 6 matching texture coordinates
      triangles[0].texCoords = sf::Vector2f(tu * tileSize.x, tv * tileSize.y);
      triangles[1].texCoords =
        sf::Vector2f((tu + 1) * tileSize.x, tv * tileSize.y);
      triangles[2].texCoords =
        sf::Vector2f(tu * tileSize.x, (tv + 1) * tileSize.y);
      triangles[3].texCoords =
        sf::Vector2f(tu * tileSize.x, (tv + 1) * tileSize.y);
      triangles[4].texCoords =
        sf::Vector2f((tu + 1) * tileSize.x, tv * tileSize.y);
      triangles[5].texCoords =
        sf::Vector2f((tu + 1) * tileSize.x, (tv + 1) * tileSize.y);
    }
}

void components::tilemap::draw(sf::RenderTarget &target,
  sf::RenderStates states) const
{
  states.transform *= getTransform();
  states.texture = tileset;
  target.draw(vertices, states);
}
