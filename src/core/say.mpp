module;
#include <iostream>
#include <string_view>

export module say;
constexpr auto RESET = "\033[0m";
constexpr auto BLACK = "\033[30m";
constexpr auto RED = "\033[31m";
constexpr auto GREEN = "\033[32m";
constexpr auto YELLOW = "\033[33m";
constexpr auto BLUE = "\033[34m";
constexpr auto MAGENTA = "\033[35m";
constexpr auto CYAN = "\033[36m";
constexpr auto WHITE = "\033[37m";
constexpr auto BOLDBLACK = "\033[1m\033[30m";
constexpr auto BOLDRED = "\033[1m\033[31m";
constexpr auto BOLDGREEN = "\033[1m\033[32m";
constexpr auto BOLDYELLOW = "\033[1m\033[33m";
constexpr auto BOLDBLUE = "\033[1m\033[34m";
constexpr auto BOLDMAGENTA = "\033[1m\033[35m";
constexpr auto BOLDCYAN = "\033[1m\033[36m";
constexpr auto BOLDWHITE = "\033[1m\033[37m";
void set_color(const std::string_view color) { std::cout << color; }
void reset_color() { std::cout << RESET; }

void _log(const std::string_view level, const std::string_view message)
{
  std::cout << "[" << level << "]: " << message << '\n';
  std::cout << RESET;
}
export namespace say {

void debug(std::string_view message)
{
#ifdef DEBUG
  set_color(BOLDGREEN);
  _log("DEBUG", message);
#endif// DEBUG
}
void info(std::string_view message)
{
  set_color(BOLDCYAN);
  _log("INFO", message);
}
void warn(std::string_view message)
{
  set_color(BOLDYELLOW);
  _log("WARN", message);
}
void error(std::string_view message)
{
  set_color(BOLDRED);
  _log("ERROR", message);
}
}// namespace say
